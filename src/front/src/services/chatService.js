const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;
const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;

const SYSTEM_CONTEXT = `
Voc√™ √© **PREVIVAI**, um assistente m√©dico virtual especializado em **preven√ß√£o e detec√ß√£o precoce de c√¢ncer**.
Seu objetivo √© orientar pacientes de forma emp√°tica, clara e respons√°vel, refor√ßando a import√¢ncia do acompanhamento m√©dico profissional.

üéØ Diretrizes principais:
- Responda em **portugu√™s brasileiro**, de forma **concreta, emp√°tica e acolhedora**
- Mantenha as respostas **curtas e diretas (at√© 150 palavras ou 3 par√°grafos curtos)**
- Explique termos m√©dicos de modo **simples e acess√≠vel**
- **Nunca diagnostique** nem invente sintomas
- Foque em **preven√ß√£o**, **sinais de alerta** e **h√°bitos saud√°veis**
- Encoraje o paciente a realizar **exames preventivos** e **consultas m√©dicas regulares**
- Sempre reforce mensagens de **esperan√ßa e cuidado**

üìù FORMATA√á√ÉO MARKDOWN (IMPORTANTE):
- Use **formata√ß√£o markdown** para tornar suas respostas mais leg√≠veis:
  - Use **negrito** para informa√ß√µes importantes (ex: **nomes de hospitais**, **sintomas graves**)
  - Use *it√°lico* para √™nfase leve
  - Use listas numeradas (1., 2., 3.) para instru√ß√µes passo a passo
  - Use listas com marcadores (*, -) para listar op√ß√µes ou sintomas
  - Use quebras de linha entre par√°grafos (linha vazia)
  - Organize informa√ß√µes de locais assim:
    
    1. **Nome do Local**
       * Endere√ßo: [endere√ßo completo]
       * Telefone: [telefone se dispon√≠vel]
    
    2. **Outro Local**
       * Endere√ßo: [endere√ßo]
    
- SEMPRE separe par√°grafos com uma linha em branco
- SEMPRE use negrito para destacar nomes de hospitais, cl√≠nicas e informa√ß√µes importantes

üí¨ COLETA DE INFORMA√á√ïES SOBRE SINTOMAS:
- Quando o paciente relatar sintomas vagos (ex: "estou com dores"), **VOC√ä MESMO deve fazer perguntas** para coletar mais informa√ß√µes:
  - "Onde voc√™ sente essa dor?" (localiza√ß√£o)
  - "H√° quanto tempo?" (dura√ß√£o)
  - "Qual a intensidade (de 0 a 10)?" (gravidade)
  - "√â constante ou vai e vem?" (padr√£o)
  - "Tem outros sintomas associados?" (sintomas relacionados)
- **NUNCA mencione "agente de liga√ß√£o" ou terceiros** - VOC√ä √© quem coleta as informa√ß√µes diretamente
- Fa√ßa perguntas de forma natural e progressiva, uma de cada vez
- Seja direto e objetivo ao perguntar

üìÖ FUNCIONALIDADE DE AGENDAMENTO:
- Voc√™ pode **ajudar o paciente a agendar uma consulta m√©dica**
- Quando o paciente pedir para agendar ou voc√™ identificar necessidade urgente, colete:
  - Nome completo  
  - Data e hor√°rio preferidos  
  - Motivo da consulta (sintomas, exame preventivo, etc.)  
  - Urg√™ncia (alta / m√©dia / baixa)
- Quando tiver todas as informa√ß√µes, use **EXATAMENTE** o formato abaixo:

  [AGENDAMENTO]
  Nome: [nome do paciente]
  Data Preferida: [data]
  Hor√°rio Preferido: [hor√°rio]
  Motivo: [breve descri√ß√£o dos sintomas]
  Urg√™ncia: [alta/m√©dia/baixa]
  [/AGENDAMENTO]

- Ap√≥s enviar o formato acima, confirme:
  "‚úÖ Agendamento registrado! Nossa equipe entrar√° em contato em breve para confirmar."

üö® DETEC√á√ÉO DE SINTOMAS GRAVES:
- Se identificar sintomas potencialmente relacionados a c√¢ncer (ex: caro√ßos, sangramentos incomuns, perda de peso inexplicada, dor persistente, feridas que n√£o cicatrizam, altera√ß√µes na pele, tosse com sangue):
  1. Alerta o paciente com empatia:
     "‚ö†Ô∏è Seus sintomas merecem aten√ß√£o m√©dica. Recomendo buscar atendimento o quanto antes."
  2. Em seguida, **ofere√ßa ajuda para localizar unidades de atendimento pr√≥ximas**, como:
     - Hospitais gerais ou oncol√≥gicos
     - Cl√≠nicas de especialidades m√©dicas
     - Unidades b√°sicas de sa√∫de (UBS)
     - Centros de diagn√≥stico
  3. Pe√ßa a cidade ou CEP do paciente e use esta resposta-padr√£o:
     "Posso te indicar locais pr√≥ximos para buscar atendimento imediato. Pode me informar sua cidade ou CEP?"
  4. Ap√≥s o paciente informar a localiza√ß√£o, **liste at√© 3 op√ß√µes de atendimento presencial pr√≥ximas**, priorizando locais p√∫blicos e acess√≠veis.

üß© Conduta geral:
- Nunca substitua o m√©dico ‚Äî apenas oriente e encaminhe
- Mantenha o paciente calmo, mas consciente da import√¢ncia de agir rapidamente quando necess√°rio
- Valorize o cuidado preventivo e o acompanhamento regular com profissionais de sa√∫de
`;


async function callGeminiAPI(messages) {
  if (!GEMINI_API_KEY) {
    throw new Error('Chave da API Gemini n√£o configurada. Configure VITE_GEMINI_API_KEY no arquivo .env');
  }

  // Formatar a mensagem
  const lastUserMessage = messages[messages.length - 1];
  const conversationHistory = messages.slice(0, -1).map(msg => {
    const role = msg.sender === 'user' ? 'Usu√°rio' : 'Assistente';
    return `${role}: ${msg.text}`;
  }).join('\n\n');

  const fullPrompt = `${SYSTEM_CONTEXT}

Hist√≥rico da conversa:
${conversationHistory}

Usu√°rio: ${lastUserMessage.text}

Assistente:`;

  const endpoints = [
    'v1beta/models/gemini-2.5-flash:generateContent',
    'v1beta/models/gemini-2.5-pro:generateContent',
    'v1/models/gemini-2.5-flash:generateContent',
    'v1/models/gemini-2.5-pro:generateContent',
  ];

  let lastError = null;

  // Tentar cada endpoint at√© um funcionar
  for (const endpoint of endpoints) {
    try {
      const url = `https://generativelanguage.googleapis.com/${endpoint}?key=${GEMINI_API_KEY}`;
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: fullPrompt
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            maxOutputTokens: 1000,
            topK: 40,
            topP: 0.95,
          },
        }),
      });

      if (!response.ok) {
        const error = await response.json();
        lastError = error;
        console.warn(`Tentativa falhou com ${endpoint}:`, error.error?.message);
        continue; 
      }

      const data = await response.json();
      

      console.log('Resposta da API:', data);
      
      if (!data.candidates || data.candidates.length === 0) {
        console.warn('Sem candidates na resposta');
        continue;
      }
      
      const candidate = data.candidates[0];
      
      if (!candidate.content || !candidate.content.parts || candidate.content.parts.length === 0) {
        console.warn('Estrutura de content inv√°lida');
        continue;
      }
      
      console.log(`‚úÖ Sucesso com endpoint: ${endpoint}`);
      return candidate.content.parts[0].text;
      
    } catch (error) {
      lastError = error;
      console.warn(`Erro ao tentar ${endpoint}:`, error.message);
      continue;
    }
  }


  console.error('Nenhum endpoint funcionou. √öltimo erro:', lastError);
  throw new Error('N√£o foi poss√≠vel conectar √† API Gemini. Verifique sua chave de API.');
}


async function callOpenAIAPI(messages) {
  if (!OPENAI_API_KEY) {
    throw new Error('Chave da API OpenAI n√£o configurada. Configure VITE_OPENAI_API_KEY no arquivo .env');
  }

  const url = 'https://api.openai.com/v1/chat/completions';

  const formattedMessages = [
    { role: 'system', content: SYSTEM_CONTEXT },
    ...messages.map(msg => ({
      role: msg.sender === 'user' ? 'user' : 'assistant',
      content: msg.text
    }))
  ];

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-4-turbo-preview',
        messages: formattedMessages,
        temperature: 0.7,
        max_tokens: 500,
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error?.message || 'Erro ao chamar API OpenAI');
    }

    const data = await response.json();
    return data.choices[0].message.content;
  } catch (error) {
    console.error('Erro OpenAI:', error);
    throw error;
  }
}

export async function sendMessage(messages) {
  try {
    if (GEMINI_API_KEY) {
      return await callGeminiAPI(messages);
    }
    
    if (OPENAI_API_KEY) {
      return await callOpenAIAPI(messages);
    }

    throw new Error('Nenhuma API configurada. Configure pelo menos uma chave de API no arquivo .env');
  } catch (error) {
    console.error('Erro no servi√ßo de chat:', error);
    
    if (error.message.includes('API')) {
      throw new Error('Por favor, configure sua chave de API no arquivo .env');
    }
    
    throw new Error('Desculpe, ocorreu um erro ao processar sua mensagem. Tente novamente.');
  }
}

export function isServiceConfigured() {
  return !!(GEMINI_API_KEY || OPENAI_API_KEY);
}
