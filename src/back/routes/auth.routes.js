const express = require('express');
// Assumindo que seus outros arquivos tamb√©m usam 'require'
const { supabase } = require('../services/supabaseClient.js'); 
const { authenticate } = require('../middleware/authMiddleware.js');

function createAuthRoutes(db) { // Envelopado na fun√ß√£o f√°brica
  const router = express.Router();

  // Fun√ß√£o para validar CPF (apenas 11 d√≠gitos para testes)
  function validarCPF(cpf) {
    cpf = cpf.replace(/\D/g, '');
    return /^\d{11}$/.test(cpf);
  }

  // üßæ Registro de usu√°rio (feito no backend com Service Role Key)
  router.post('/register', async (req, res) => {
    console.log('[DEBUG] Recebendo requisi√ß√£o de registro:', {
      ...req.body,
      password: '***' // Ocultando a senha no log
    });

    const { email, password, nomeCompleto, cpf, telefone } = req.body;
    if (!email || !password) return res.status(400).json({ error: 'Email e senha s√£o obrigat√≥rios.' });

    // Valida√ß√£o de CPF (apenas 11 d√≠gitos para testes)
    const cpfLimpo = cpf.replace(/\D/g, '');
    if (!validarCPF(cpfLimpo)) {
      return res.status(400).json({ error: 'CPF deve conter 11 d√≠gitos num√©ricos.' });
    }

    try {
      console.log('[DEBUG] Iniciando cria√ß√£o do usu√°rio no Supabase');
      // Tenta criar o usu√°rio via API administrativa (evita limita√ß√µes de RLS)
      let createResult;

      console.log('[DEBUG] Verificando m√©todo dispon√≠vel para cria√ß√£o de usu√°rio');
      
      console.log('[DEBUG] Tentando criar usu√°rio com signUp');
      createResult = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            nomeCompleto: nomeCompleto, // Exatamente como est√° no trigger
            cpf: cpf,
            telefone: telefone
          }
        }
      });
      
      console.log('[DEBUG] Resultado da cria√ß√£o:', {
        error: createResult.error ? 'Sim' : 'N√£o',
        user: createResult.data?.user ? 'Presente' : 'Ausente'
      });

      if (createResult.error) {
        console.error('[DEBUG] Erro na cria√ß√£o do usu√°rio:', createResult.error);
        return res.status(400).json({ error: createResult.error.message || createResult.error });
      }

      const createdUser = createResult.data?.user || createResult.user;
      if (!createdUser) return res.status(500).json({ error: 'Usu√°rio criado mas dados retornados incompletos.' });

      console.log('[DEBUG] Preparando para inserir perfil do usu√°rio');
      // Insere um registro de perfil na tabela `perfis`
      const profile = {
        id: createdUser.id,
        nome_completo: nomeCompleto,
        cpf: cpf, // Mant√©m o CPF com formata√ß√£o (pontos e h√≠fen)
        telefone: telefone // Mant√©m o telefone com formata√ß√£o
        // created_at ser√° preenchido automaticamente pelo PostgreSQL
      };
      
      console.log('[DEBUG] Dados do perfil a serem inseridos:', {
        ...profile,
        SenhaHash: '***' // Ocultando senha no log
      });

      const { data: profileData, error: profileError } = await supabase
        .from('perfis')
        .insert([profile])
        .select()
        .single();

      if (profileError) {
        console.error('[DEBUG] Erro ao criar perfil:', profileError);
        // Caso a cria√ß√£o do perfil falhe, tentamos remover o usu√°rio criado para manter consist√™ncia
        try {
          if (createdUser && createdUser.id && supabase.auth && supabase.auth.admin && typeof supabase.auth.admin.deleteUser === 'function') {
            console.log('[DEBUG] Tentando remover usu√°rio ap√≥s falha no perfil');
            await supabase.auth.admin.deleteUser(createdUser.id);
          }
        } catch (cleanupErr) {
          console.error('[DEBUG] Erro ao tentar remover usu√°rio ap√≥s falha no profile:', cleanupErr);
        }

        return res.status(500).json({ error: 'Erro ao salvar perfil do usu√°rio: ' + profileError.message });
      }

      res.status(201).json({ message: 'Usu√°rio criado com sucesso.', user: createdUser, profile: profileData });
    } catch (err) {
      console.error('Erro no registro de usu√°rio:', err);
      return res.status(500).json({ error: 'Erro interno ao criar usu√°rio.' });
    }
  });

  // üîë Login
  router.post('/login', async (req, res) => {
    const { email, password } = req.body;
    const { data, error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) return res.status(401).json({ error: error.message });
    res.json({
      message: 'Login realizado com sucesso.',
      token: data.session.access_token,
      user: data.user
    });
  });

  // üë§ Rota protegida
  router.get('/profile', authenticate, async (req, res) => {
    // A fun√ß√£o 'authenticate' (middleware) roda antes disto.
    // Se o token for v√°lido, ela coloca o 'user' no 'req'.
    res.json({ message: 'Acesso autorizado.', user: req.user });
  });

  return router;
}

module.exports = createAuthRoutes;